#!/bin/bash
set -e
PACKAGE="$1"
PACKAGE_MK="${PACKAGE}/package.info"
SOURCE_DIR="${PACKAGE}/source"
export CCACHE_DIR="../.ccache"

if [[ -z "$PACKAGE" ]]; then
  echo "Please specify package: $0 <package>"
  exit 1
elif [[ ! -d "$PACKAGE" ]]; then
  echo "Please specify a package directory that exists.  Not: $PACKAGE"
  exit 1
elif [[ ! -f "$PACKAGE_MK" ]]; then
  echo "No package.mk found at: $PACKAGE_MK"
  exit 1
fi

source "${PACKAGE_MK}"

if [[ -z "${GET_HANDLER_SUPPORT}" || "${GET_HANDLER_SUPPORT}" == "git" ]]; then

   if [[ -a "${PKG_VERSION}" ]]; then
     echo "${PKG_VERSION} required"
     exit 1
   fi
   ALREADY_CLONED=false
   if [[ -d "${SOURCE_DIR}" ]]; then
      pushd "${SOURCE_DIR}"
      if [[ "$(git config --get remote.origin.url)" == "$PKG_URL" ]]; then
        git fetch
        ALREADY_CLONED="true"
      fi
      popd
   fi
   if [[ "$ALREADY_CLONED" == "false" ]]; then
      rm -rf "${SOURCE_DIR}"
      git clone "${PKG_URL}" "${SOURCE_DIR}"
   fi
   echo "Checking out: ${PKG_VERSION}"
   pushd "${SOURCE_DIR}"
   git clean -f
   git checkout "${PKG_VERSION}"
   popd
else
  echo "Handler: ${GET_HANDER_SUPPORT} not found"
  exit 1
fi

if [[ -z "$DOCKER_PLATFORM" ]]; then
  DOCKER_PLATFORM="linux/arm64/v8"
fi

DOCKER_IMAGE=pkegg/port-builder/${PACKAGE}
pushd "${PACKAGE}"
if [[ -f Dockerfile ]]; then
  docker buildx build --pull --platform ${DOCKER_PLATFORM} --tag "${DOCKER_IMAGE}" --load .
fi
popd

if [[ -z "${DOCKER_WORK_DIR}" ]]; then
  DOCKER_WORK_DIR=/work
fi

GID=$(id -g)
DOCKER_CMD=docker  #TBD: podman support

# Podman requires some extra args (`--userns=keep-id` and `--security-opt=label=disable`).  Set those args if using podman
#PODMAN_ARGS:= $(shell if ! which docker 2>/dev/null 1>/dev/null && which podman 2> /dev/null 1> /dev/null; then echo "--userns=keep-id --security-opt=label=disable -v /proc/mounts:/etc/mtab"; fi)

# Use 'sudo' if docker ps doesn't work.  In theory, other things than missing sudo could cause this.  But sudo needed is a common issue and easy to fix.
SUDO=""
if ! docker ps -q 2> /dev/null 1> /dev/null && sudo docker ps -q> /dev/null; then
 SUDO="sudo"
fi

# Launch docker as interactive if this is an interactive shell (allows ctrl-c for manual and running non-interactive - aka: build server)
INTERACTIVE=""
if [ -t 0 ]; then
  INTERACTIVE="-it"
fi

pushd "${SOURCE_DIR}"
# Get .env file ready
env | grep "=" > .env

${SUDO} ${DOCKER_CMD} run --platform ${DOCKER_PLATFORM} ${PODMAN_ARGS} ${INTERACTIVE} --env-file .env --rm --user ${UID}:"${GID}" -v "${PWD}/..:${DOCKER_WORK_DIR}" -w ${DOCKER_WORK_DIR}/source ${DOCKER_IMAGE} bash -c "../build"
popd